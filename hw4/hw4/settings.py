"""
Django settings for hw4 project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'phs3^g7+m@+g!0u3q4q08-1s+%nx#ogn+!=6!v**g+1dfaa%uw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['homework.mutiny.codes', '127.0.0.1', '156.17.150.222']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_python3_ldap',
    # 'django_auth_ldap.backend.LDAPBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hw4.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['/home/ivan/Dropbox/Faks/5_godina/application_security/hw4/hw5/templates', os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hw4.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')



# # AUTH_LDAP_SERVER_URI = 'ldap://homework5.mutiny.codes:389'
# #
# # LDAP_AUTH_URL = 'ldap://homework5.mutiny.codes:389'
# #
# # LDAP_AUTH_USE_TLS = False
# #
# # # The LDAP search base for looking up users.
# # LDAP_AUTH_SEARCH_BASE = "dc=homework5,dc=mutiny,dc=codes"
# #
# # # The LDAP class that represents a user.
# # LDAP_AUTH_OBJECT_CLASS = "inetOrgPerson"
# #
# # # User model fields mapped to the LDAP
# # # attributes that represent them.
# # LDAP_AUTH_USER_FIELDS = {
# #     "username": "uid",
# #     "password": "pass",
# #     "first_name": "givenName",
# #     "last_name": "sn",
# #     "email": "mail",
# # }
# #
# # # A tuple of django model fields used to uniquely identify a user.
# # LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)
# #
# # # Path to a callable that takes a dict of {model_field_name: value},
# # # returning a dict of clean model data.
# # # Use this to customize how data loaded from LDAP is saved to the User model.
# # LDAP_AUTH_CLEAN_USER_DATA = "django_python3_ldap.utils.clean_user_data"
# #
# # # Path to a callable that takes a user model and a dict of {ldap_field_name: [value]},
# # # and saves any additional user relationships based on the LDAP data.
# # # Use this to customize how data loaded from LDAP is saved to User model relations.
# # # For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.
# # LDAP_AUTH_SYNC_USER_RELATIONS = "django_python3_ldap.utils.sync_user_relations"
# #
# # # Path to a callable that takes a dict of {ldap_field_name: value},
# # # returning a list of [ldap_search_filter]. The search filters will then be AND'd
# # # together when creating the final search filter.
# # LDAP_AUTH_FORMAT_SEARCH_FILTERS = "django_python3_ldap.utils.format_search_filters"
# #
# # # Path to a callable that takes a dict of {model_field_name: value}, and returns
# # # a string of the username to bind to the LDAP server.
# # # Use this to support different types of LDAP server.
# # LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_openldap"
# #
# # # Sets the login domain for Active Directory users.
# # LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = None
# #
# # # The LDAP username and password of a user for querying the LDAP database for user
# # # details. If None, then the authenticated user will be used for querying, and
# # # the `ldap_sync_users` command will perform an anonymous query.
# # LDAP_AUTH_CONNECTION_USERNAME = None
# # LDAP_AUTH_CONNECTION_PASSWORD = None
#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "loggers": {
#         "django_python3_ldap": {
#             "handlers": ["console"],
#             "level": "INFO",
#         },
#     },
# }



import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# Baseline configuration.
AUTH_LDAP_SERVER_URI = "ldap://homework5.mutiny.codes:389"

AUTH_LDAP_BIND_DN = "cn=admin,dc=homework5,dc=mutiny,dc=codes"
AUTH_LDAP_BIND_PASSWORD = "Ivan1357"
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=users,dc=homework5,dc=mutiny,dc=codes",
    ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
# or perhaps:
# AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=homework5,dc=mutiny,dc=codes"

# Set up the basic group parameters.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=groups,dc=homework5,dc=mutiny,dc=codes",
    ldap.SCOPE_SUBTREE, "(objectClass=groupOfNames)"
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# Simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "ou=groups,dc=homework5,dc=mutiny,dc=codes"
# AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=django,ou=groups,dc=homework5,dc=mutiny,dc=codes"

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "uid",
    "groups": "gid",
    "password": "pass",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTH_LDAP_PROFILE_ATTR_MAP = {
    "employee_number": "employeeNumber"
}

# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_active": "cn=finance,ou=groups,dc=homework5,dc=mutiny,dc=codes",
#     "is_staff": "ou=users,dc=homework5,dc=mutiny,dc=codes",
#     "is_superuser": "cn=finance,ou=groups,dc=homework5,dc=mutiny,dc=codes",
# }

AUTH_LDAP_PROFILE_FLAGS_BY_GROUP = {
    "is_staff": "ou=users,dc=homework5,dc=mutiny,dc=codes",
    # "is_superuser": "ou=groups,dc=homework5,dc=mutiny,dc=codes",
}

# Use LDAP group membership to calculate group permissions.
# AUTH_LDAP_FIND_GROUP_PERMS = True

AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Cache group memberships for an hour to minimize LDAP traffic
AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600


# Keep ModelBackend around for per-user permissions and maybe a local
# superuser.
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)


# from django_auth_ldap.backend import LDAPBackend
#
# def update_groups(sender, user=None, ldap_user=None, **kwargs):
#     # Remember that every attribute maps to a list of values
#     descriptions = ldap_user.attrs.get("description", [])
#     print(description)
#     if "IT - Help Desk" in descriptions:
#         print(description)
#         # Add user to group
#     else:
#         print(description)

        # Remove user from group

# django_auth_ldap.backend.LDAPBackend.populate_user(update_groups)
